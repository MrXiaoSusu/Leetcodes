#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <set>

using namespace std;

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() {}
	TreeNode(int _val) { val = _val;  left = NULL; right = NULL; }
};
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};
class Solution {
public :
	int characterReplacement(string s, int k) {
		int Max = 0;
		if (s.length() == 0)
			return Max;
		unordered_map<char, int> map;
		string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		for (int i = 0; i < 26; i++)
			map[str[i]] = 0;
		int i = 0, j = 0, maxcount = 0;
		for (; j < s.length(); j++) {
			map[s[j]]++;
			maxcount = max(maxcount, map[s[j]]);
			while (j - i + 1 - maxcount > k) {
				map[s[i]]--;
				i++;
			}
		}
		Max = s.length() - i;
		return Max;
	}
};
void main() {
	printf("Hello Word!\n");
	
	string s = "ABBBA";
	string p = "ABCDABD";
	vector<string> ss = { "a", ""};
	Solution *solution = new Solution();
	/*ListNode *l1 = new ListNode(5);
	ListNode *l2 = new ListNode(4);
	ListNode *l3 = new ListNode(3);
	l1->next = l2; l2->next = l3; */
	vector<int> nums1 = {1,2,2,1};
	vector<int> nums2 = {2,2};
	cout << solution->characterReplacement(s, 2) << endl;
	
}
