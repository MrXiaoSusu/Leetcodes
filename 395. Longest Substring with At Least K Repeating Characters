#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <set>

using namespace std;

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() {}
	TreeNode(int _val) { val = _val;  left = NULL; right = NULL; }
};
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};
class Solution {
public :

	int longestSubstring(string s, int k) {
		if (s.length() == 0)
			return 0;
		if (k == 1)
			return s.length();
		if (k > s.length())
			return 0;
		unordered_map<char, int> map;
		for (int i = 0; i < s.length(); i++) {
			if (map.find(s[i]) != map.end())
				map[s[i]]++;
			else
				map[s[i]] = 1;
		}
		vector<int> index;//we should avoid these characters 
		for (unordered_map<char, int>::iterator it = map.begin(); it != map.end(); it++) {
			if (it->second < k) {
				for (int i = 0; i < s.length(); i++) {
					if (s[i] == it->first) { index.push_back(i); }
				}
			}
		}
		if (index.size() == 0)
			return s.length();
		index.push_back(-1);
		index.push_back(s.length());
		sort(index.begin(), index.end());
		int Max = 0;
		for (size_t i = 1; i < index.size(); i++) {
			int tmp = longestSubstring(s.substr(index[i - 1] + 1, index[i] - index[i - 1] - 1), k);
			Max = max(Max, tmp);
		}
		return Max;
	}
	
};
void main() {
	printf("Hello Word!\n");
	
	string s = "aaabb";
	string p = "ABCDABD";
	vector<string> ss = { "a", ""};
	Solution *solution = new Solution();
	/*ListNode *l1 = new ListNode(5);
	ListNode *l2 = new ListNode(4);
	ListNode *l3 = new ListNode(3);
	l1->next = l2; l2->next = l3; */
	vector<int> nums1 = {1,2,2,1};
	vector<int> nums2 = {2,2};
	cout << solution->longestSubstring(s, 3) << endl;
	
}
