#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <queue>

using namespace std;

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() {}
	TreeNode(int _val) { val = _val;  left = NULL; right = NULL; }
};
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};
class Twitter {
	struct Tweet {
		int userid;
		int time;
		int id;
		Tweet(int userid, int id, int time) : time(time), id(id), userid(userid){};
		friend bool operator< (const Tweet &a, const Tweet &b) {
			return a.time<b.time;//最大值优先  
		}
	};
	
	unordered_map<int, vector<Tweet>> tweets;
	unordered_map<int, unordered_set<int>> followings;
	int time;
	public:
		/** Initialize your data structure here. */

		Twitter() {
			time = 0;
		}

		/** Compose a new tweet. */
		void postTweet(int userId, int tweetId) {
			tweets[userId].push_back(Tweet(userId, tweetId, time++));
		}

		/** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
		vector<int> getNewsFeed(int userId) {
			priority_queue<Tweet> q;
			for (size_t i = 0; i < tweets[userId].size(); i++) {
				q.push(tweets[userId][i]);
			}
			for (unordered_set<int>::iterator it = followings[userId].begin(); it != followings[userId].end(); it++) {
				for (size_t j = 0; j < tweets[*it].size(); j++) {
					q.push(tweets[*it][j]);
				}
			}
			int n = 0;
			vector<int> res;
			while (!q.empty() && n < 10) {
				Tweet t = q.top();
				res.push_back(t.id);
				q.pop();
				n++;
			}
			return res;
		}

		/** Follower follows a followee. If the operation is invalid, it should be a no-op. */
		void follow(int followerId, int followeeId) {
			if (followerId != followeeId)
				followings[followerId].insert(followeeId);
		}

		/** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
		void unfollow(int followerId, int followeeId) {
			followings[followerId].erase(followeeId);
		}
};
void main() {
	printf("Hello Word!\n");
	
	string s = "abccccdd";
	string p = "ABCDABD";
	vector<string> ss = { "a", ""};
	//Solution *solution = new Solution();
	/*ListNode *l1 = new ListNode(5);
	ListNode *l2 = new ListNode(4);
	ListNode *l3 = new ListNode(3);
	l1->next = l2; l2->next = l3; */
	
	
}
