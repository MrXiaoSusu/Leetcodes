import sun.reflect.generics.tree.Tree;

import java.util.*;

/**
 * Created by Andrew on 2017/5/11.
 */
public class Solution {

    public double _findkthelement(int[] nums1, int s, int[] nums2, int t, int k) {
        if (nums1.length - s > nums2.length - t)
            return _findkthelement(nums2, t, nums1, s, k);
        if (nums1.length == s)
            return nums2[t + k-1];
        if (k == 1)
            return Math.min(nums1[s], nums2[t]);
        int l = Math.min(nums1.length - s , k/2);
        int r = Math.min(nums2.length - t , k/2 );
        if (nums1[s+l-1] < nums2[t+r-1])
            return _findkthelement(nums1, s + l, nums2, t, k - l);
        else
            return _findkthelement(nums1, s, nums2, t + r, k - r);
    }
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;

        int k1 = (m + n + 1) / 2;
        int k2 = (m + n + 2) / 2;
        return (_findkthelement(nums1, 0, nums2, 0, k1) + _findkthelement(nums1, 0, nums2, 0, k2)) / 2;
    }
     public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if (m < n)
            return findMedianSortedArrays(nums2, nums1);
        if (n == 0)
            return (nums2[n/2] + nums2[(n-1)/2]) / 2;
        int low = 0, high = n*2;
        int mid1 = 0, mid2 = 0;
        while (low <= high) {
            mid2 = (low + high) / 2;
            mid1 = m + n - mid2;
            double L1 = (mid1 == 0)? Integer.MIN_VALUE:nums1[(mid1 - 1)/2];
            double R1 = (mid1 == m*2)? Integer.MAX_VALUE:nums1[mid1/2];
            double L2 = (mid2 == 0)? Integer.MIN_VALUE:nums2[(mid2-1)/2];
            double R2 = (mid2 == n*2)? Integer.MAX_VALUE:nums2[mid2/2];
            if (L1 > R2) low = mid2 + 1;
            else if(L2 > R1) high = mid2 - 1;
            else return (Math.max(L1, L2) + Math.min(R1, R2)) / 2;
        }
        return 0.0;
    }

    public static void main(String[] args) {

        Solution solution = new Solution();
        int n = 0;
        Scanner scanner = new Scanner(System.in);
        /*while((n = scanner.nextInt()) != -1){
            System.out.println();
        }*/
        String s = "aa";
        int[] nums1 = {1};
        int[] nums2 = {1};
        System.out.println(solution.findMedianSortedArrays(nums1, nums2));
    }
}
