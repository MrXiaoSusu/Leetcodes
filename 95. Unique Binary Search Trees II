import sun.reflect.generics.tree.Tree;

import java.util.*;

/**
 * Created by Andrew on 2017/5/11.
 */
public class Solution {

    public List<TreeNode> generateTrees(int n) {
        List<TreeNode>[] list = new List[n+1];
        list[0] = new LinkedList<TreeNode>();
        if (n == 0)
            return list[0];
        list[0].add(null);
        for (int step = 1; step <= n; step++) {
            list[step] = new LinkedList<TreeNode>();
            for (int root = 1; root <= step; root++) {
                for (TreeNode tempL : list[root-1]) {
                    for (TreeNode tempR : list[step - root]) {
                        TreeNode treeNode = new TreeNode(root);
                        treeNode.left = tempL;
                        treeNode.right = clone(tempR, root);
                        list[step].add(treeNode);
                    }
                }
            }
        }
        return list[n];
    }
    public TreeNode clone(TreeNode treeNode, int offset){
        if (treeNode == null)
            return null;
        TreeNode t = new TreeNode(treeNode.val + offset);
        t.left = clone(treeNode.left, offset);
        t.right = clone(treeNode.right, offset);
        return t;
    }

    public static void main(String[] args) {

        Solution solution = new Solution();
        int n = 0;
        Scanner scanner = new Scanner(System.in);
        while((n = scanner.nextInt()) != -1){
            System.out.println();
        }
    }
}
