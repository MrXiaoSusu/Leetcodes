class Solution {
    public int findKthLargest(int[] nums, int k) {
        if (nums == null || k < 1 || nums.length < k)
            return 0;
        k = nums.length - k;
        int lo = 0, hi = nums.length - 1;
        int p = 0;
        while (lo < hi) {
            p = partrition(nums, lo, hi);
            if (p < k)
                lo = p + 1;
            else if (p > k)
                hi = p - 1;
            else
                break;
        }
        return nums[k];
    }
    
    public int partrition(int[] nums, int lo, int hi) {
        int pivot = nums[lo];
        int i = lo + 1;
        int j = hi;
        while (true) {
            while (i <= hi && nums[i] < pivot) i++;
            while (j >= lo && nums[j] > pivot) j--;
            if (i >= j)
                break;
            exch(nums, i, j);
            i++;j--;
        }
        exch(nums, lo, j);
        return j;
    }
    public void exch(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
