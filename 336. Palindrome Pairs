#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

/*struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() {}
	TreeNode(int _val) { val = _val;  left = NULL; right = NULL; }
};
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};*/
class Solution {
	public:
		bool isPalindrome(string s) {
			if (s.empty())
				return true;
			int i = 0, j = s.length()-1;
			while (i < j) {
				if (s[i] != s[j]) {
					return false;
				}
				i++; j--;
			}
			return true;
		}

		vector<vector<int>> palindromePairs(vector<string>& words) {
			vector<vector<int>> result;
			if (words.size() == 0) return result;
			unordered_map<string, int> map;
			for (int i = 0; i < words.size(); i++) {
				string str = words[i];
				reverse(str.begin(), str.end());
				map[str] = i;
			}
			for (int i = 0; i < words.size(); i++) {
				if (words[i].empty()) {
					for (int j = 0; j < words.size(); j++)
						if (i!=j && isPalindrome(words[j])) {
							result.push_back({ i, j });
						}
					continue;
				}
				for (int j = 0; j < words[i].length(); j++) {
					string left = words[i].substr(0, j);
					string right = words[i].substr(j, words[i].length()-j);
					if (map.find(left) != map.end() && isPalindrome(right) && map[left] != i)
						result.push_back({i, map[left]});
					if (map.find(right) != map.end() && isPalindrome(left) && map[right] != i)
						result.push_back({map[right], i});
				}
			}
			return result;
		}
};
void main() {
	printf("Hello Word!\n");
	
	string s = "abccccdd";
	string p = "ABCDABD";
	vector<string> ss = { "a", ""};
	Solution *solution = new Solution();
	/*ListNode *l1 = new ListNode(5);
	ListNode *l2 = new ListNode(4);
	ListNode *l3 = new ListNode(3);
	l1->next = l2; l2->next = l3; */
	solution->palindromePairs(ss);
}
