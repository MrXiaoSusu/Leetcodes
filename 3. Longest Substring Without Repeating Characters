#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <set>

using namespace std;

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() {}
	TreeNode(int _val) { val = _val;  left = NULL; right = NULL; }
};
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};
class Solution {
public :
	int lengthOfLongestSubstring(string s) {
		int Max = 0;
		if (s.length() == 0)
			return Max;
		unordered_map<char, int> map;
		for (int j = 0; j < s.length(); j++) {
			int i = j;
			map.clear();
			while (i < s.length()) {
				if (map.find(s[i]) != map.end()) {
					break;
				}
				map[s[i]] = 1;
				i++;
			}
			Max = max(Max, i - j);
		}
		return Max;
	}
};
void main() {
	printf("Hello Word!\n");
	
	string s = "pwwkew";
	string p = "ABCDABD";
	vector<string> ss = { "a", ""};
	Solution *solution = new Solution();
	/*ListNode *l1 = new ListNode(5);
	ListNode *l2 = new ListNode(4);
	ListNode *l3 = new ListNode(3);
	l1->next = l2; l2->next = l3; */
	vector<int> nums1 = {1,2,2,1};
	vector<int> nums2 = {2,2};
	cout << solution->lengthOfLongestSubstring(s) << endl;
	
}
