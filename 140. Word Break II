class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> res = new LinkedList<>();
        if (s == null || s.length() == 0)
            return res;
        boolean dp[] = new boolean[s.length() + 1];//dp[i]  [i~s.length()]
        List<Integer> path[] = new List[s.length() + 1];//path
        dp[s.length()] = true;
        for (int i = s.length() - 1; i >= 0; i--) {
            path[i] = new LinkedList<Integer>();
            for (int j = i + 1; j <= s.length(); j++) {
                if (dp[j] && wordDict.contains(s.substring(i, j))) {
                    dp[i] = true;
                    path[i].add(j);
                }
            }
        }
        if (!dp[0])
            return res;
        gen(s, "", 0, dp, path, res);
        return res;
    }
    public void gen(String s, String curS, int p, boolean dp[], List<Integer> path[], List<String> res) {
        if (p == s.length()) {
            res.add(curS.substring(0, curS.length()-1));
            return;
        }
        for (Integer i : path[p]) {
            String str = curS;
            str += s.substring(p, i) + " ";
            gen(s, str, i, dp, path, res);
        }
    }
}
