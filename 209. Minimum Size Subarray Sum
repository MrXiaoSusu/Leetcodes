public int minSubArrayLenNLogN(int s, int[] nums) {
        if (nums == null || nums.length == 0)
            return 0;
        int res = Integer.MAX_VALUE, sum = 0;
        int[] sums = new int[nums.length + 1];

        for (int i = 1; i < sums.length; i++) sums[i] = sums[i-1] + nums[i-1];//sums[i] denote sum of nums[0~i-1]
        for (int i = 0; i < sums.length; i++) {
            int tmp = binarysearch(sums, i + 1, sums.length - 1,sums[i] + s);
            if (tmp != sums.length)res = Math.min(res, tmp - i);
        }
        return (res < Integer.MAX_VALUE ? res : 0);
    }
    public int binarysearch(int[] sums, int lo, int hi,  int s) {
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (sums[mid] >= s) {
                hi = mid - 1;
            }else
                lo = mid + 1;
        }
        return lo;
    }
    public int minSubArrayLen(int s, int[] nums) {
        int res = nums.length + 1;
        if (nums == null || nums.length == 0)
            return 0;
        int left = 0, right = 0, sum = 0;
        while (right < nums.length) {
            sum += nums[right];
            if (sum >= s) {
                res = Math.min(res, right - left + 1);
                sum = sum - nums[left] - nums[right];
                left++;
            }else
                right++;
        }
        return (res < nums.length + 1? res : 0);
    }
