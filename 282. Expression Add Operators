public List<String> addOperators(String num, int target) {
        List<String> res = new LinkedList<>();
        if (num == null || num.length() == 0)
            return res;
        for (int i = 0; i < num.length(); i++) {
            if (i > 0 && num.charAt(0) == '0')
                break;
                DFS(res, num.substring(0, i + 1), Long.valueOf(num.substring(0, i + 1)), Long.valueOf(num.substring(0, i + 1)), '+', i + 1, num, target);
        }
        return res;
    }
    public void DFS(List<String> res, String curS, long curSum, long preNum, char preOp, int p, String num, int target){
        if (p == num.length()){
            if (curSum == target)
                res.add(new String(curS));
            return;
        }
        String str;long n;
        for (int i = p; i < num.length(); i++) {
            if (i > p && num.charAt(p) == '0')
                break;
            //+ operater
            str = curS + "+" + num.substring(p, i + 1);
            n = Long.valueOf(num.substring(p, i + 1));
            DFS(res, str, curSum + n, n, '+', i + 1, num, target);
            //- operater
            str = curS + "-" + num.substring(p, i + 1);

            DFS(res, str, curSum - n, n, '-', i + 1, num, target);
            //* operater
            str = curS + "*" + num.substring(p, i + 1);

            DFS(res, str, (preOp == '+') ? curSum - preNum + n * preNum : curSum + preNum - n * preNum , preNum * n, preOp, i + 1, num, target);
        }

    }
