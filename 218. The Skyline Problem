class Solution {
    public List<int[]> getSkyline(int[][] buildings) {
        List<int[]> res = new LinkedList<>();
        if (buildings == null || buildings.length == 0)
            return res;
        return getSkyLine(buildings, 0, buildings.length - 1);
    }
    public List<int[]> getSkyLine(int[][] buildings, int left, int right) {  
        List<int[]> res = new LinkedList<>();
        if (left == right) {
            res.add(new int[]{buildings[left][0], buildings[left][2]});
            res.add(new int[]{buildings[right][1], 0});
        }
        else{
            int mid = (left+right) >> 1;
            res = mergeSkyLine(getSkyLine(buildings, left, mid), getSkyLine(buildings, mid+1, right));
        }       
        return res;
    }
    public List<int[]> mergeSkyLine(List<int[]> l1, List<int[]> l2) {
        List<int[]> res = new LinkedList<>();
        int x = 0, height = 0;
        int h1 = 0, h2 = 0;
        while (l1.size() > 0 && l2.size() > 0) {
            if (l1.get(0)[0] < l2.get(0)[0]) {
                x = l1.get(0)[0];
                h1 = l1.get(0)[1];
                l1.remove(0);
            } else if (l1.get(0)[0] > l2.get(0)[0]) {
                x = l2.get(0)[0];
                h2 = l2.get(0)[1];
                l2.remove(0);
            } else {
                x = l1.get(0)[0];
                h1 = l1.get(0)[1];
                h2 = l2.get(0)[1];
                l1.remove(0);
                l2.remove(0);
            }         
            height = Math.max(h1, h2);
            if (res.size() == 0 || res.get(res.size()-1)[1] != height)
                res.add(new int[]{x, height});
        }
        res.addAll(l1);
        res.addAll(l2);
        return res;
    }
}
