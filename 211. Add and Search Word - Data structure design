class WordDictionary {
    class TrieNode{
        public char c;
        public boolean isWord;
        public TrieNode children[] = new TrieNode[26];
        public TrieNode(char ch) {
            c = ch;
            isWord = false;
        }
    }
    /** Initialize your data structure here. */
    private TrieNode root;
    public WordDictionary() {
        root = new TrieNode(' ');
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode t = root;
        char c;
        for(int i = 0; i < word.length(); i++) {
            c = word.charAt(i);
            if (t.children[c - 'a'] == null)
                t.children[c - 'a'] = new TrieNode(c);
            t = t.children[c - 'a'];
        }
        t.isWord = true;
    }
    
    public boolean searchprefix(String word, TrieNode t) {
        if (t == null)
            return false;
        if (word == null || word.length() == 0)
            return t.isWord;
        char c = word.charAt(0);
        if (c == '.') {
            for (TrieNode tr : t.children){
                if (searchprefix(word.substring(1), tr))
                    return true;
            }
            return false;
        }
        if (t.children[c - 'a'] == null)
            return false;
        else
            return searchprefix(word.substring(1), t.children[c - 'a']);
        
    }
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        if (word == null || word.length() == 0)
            return false;
        TrieNode t = root;
        return searchprefix(word, root);
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
