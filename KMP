#include <iostream>
#include <algorithm>
#include <vector>
#include <string>

using namespace std;

/*struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() {}
	TreeNode(int _val) { val = _val;  left = NULL; right = NULL; }
};
struct ListNode {
	int val;
	ListNode *next;
	ListNode(int x) : val(x), next(NULL) {}
};*/
class Solution {
	public:
		string shortestPalindrome(string s) {
			if (s.empty())
				return s;
			string res = s;
			::reverse(res.begin(), res.end());
			string l = s + "#" +res;
			vector<int> p(l.length(), 0);//max num of prefix = surfix  abab p=2;
			for (int i = 1; i < l.length(); i++) {
				int k = p[i-1];
				while (k > 0 && l[k] != l[i]) {
					k = p[k-1];
				}
				p[i] = k + (l[k] == l[i]);
			}
			return res.substr(0, res.length() - p[l.length()-1]) + s;
		}
		int KMP(string s, string p) {
			int i = 0, j = 0;//i is index of s; j is index of p;
			vector<int> P(p.length(),0);//number of common fix
			for (int k = 1; k < p.length(); k++) {
				int t = P[k-1];
				if (p[t] == p[k]) {
					P[k] = t + 1;
				}
				while (t > 0 && p[t] != p[k])
					t = P[t - 1];
				P[k] = t + (p[t] == p[k]);
			}

			while (i < s.length() && j < p.length()) {
				if (s[i] == p[j]) {
					i++; j++;
					continue;
				};
				if (j > 0)
					j = P[j - 1];
				else
					i++;
			}
			if (j == p.length())
				return i-j;
			return -1;
		}
};
void main() {
	printf("Hello Word!\n");
	
	string s = "BBCABCDABABCDABCDABDE";
	string p = "ABCDABD";
	Solution *solution = new Solution();
	/*ListNode *l1 = new ListNode(5);
	ListNode *l2 = new ListNode(4);
	ListNode *l3 = new ListNode(3);
	l1->next = l2; l2->next = l3; */
	cout << solution->KMP(s, p) <<endl;
}
