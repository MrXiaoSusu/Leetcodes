public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> res = new LinkedList<>();
        if (root == null)
            return res;
        Queue<TreeNodewithcol> queue = new LinkedList<TreeNodewithcol>();
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        int min = 0;
        int max = 0;
        queue.add(new TreeNodewithcol(root, 0));
        while (!queue.isEmpty()) {
            TreeNodewithcol t = queue.poll();
            if (map.containsKey(t.col)) {
                map.get(t.col).add(t.TreeNode.val);
            }else
                map.put(t.col, new ArrayList<Integer>(Arrays.asList(t.TreeNode.val)));
            if (t.TreeNode.left != null){
                queue.add(new TreeNodewithcol(t.TreeNode.left, t.col - 1));
                min = Math.min(t.col-1, min);
            }
            if (t.TreeNode.right != null) {
                queue.add(new TreeNodewithcol(t.TreeNode.right, t.col + 1));
                max = Math.max(t.col+1, max);
            }
        }
        for (int i = min; i <= max; i++)
            res.add(map.get(i));
        return res;
    }
