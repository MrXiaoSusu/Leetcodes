class Solution {
    public boolean exist(char[][] board, String word) {
        if (word == null || word.length() == 0)
            return true;
        if (board.length == 0 || board[0].length == 0)
            return false;
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i = 0; i < board.length; i++)
            Arrays.fill(visited[i], false);
        for (int i = 0; i < board.length; i++)
            for (int j = 0; j < board[i].length; j++)
                if (dfs(board, visited, word, 0, i, j))
                    return true;
        return false;
    }
    public boolean dfs(char[][] board, boolean[][] visited, String word, int p, int i, int j) {
        if (p == word.length())
            return true;
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length)
            return false;
        if (visited[i][j])
            return false;
        if (board[i][j] == word.charAt(p)) {
            visited[i][j] = true;
            if (dfs(board, visited, word, p+1, i-1, j))
                return true;
            if (dfs(board, visited, word, p+1, i+1, j))
                return true;
            if (dfs(board, visited, word, p+1, i, j-1))
                return true;
            if (dfs(board, visited, word, p+1, i, j+1))
                return true;
            visited[i][j] = false;
        }
        return false;
    }
}
