import org.omg.CosNaming.NamingContextExtPackage.StringNameHelper;
import sun.reflect.generics.tree.Tree;

import java.time.temporal.Temporal;
import java.util.*;

/**
 * Created by Andrew on 2017/4/3.
 */
public class test {

    public static String LongestCommonSubsequence(String a,String b){
        int n = a.length();
        int m = b.length();
        int[][] w = new int[n+1][m+1];//Longest length of common subsequence ai bj
        int[][] map = new int[n+1][m+1];//record the subsequence -1 0 +1 a ab b larger one
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < n; i++) {
            w[i][0] = 0;
        }
        for (int i = 0; i < m; i++) {
            w[0][i] = 0;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (a.charAt(i-1) == b.charAt(j-1)){
                    w[i][j] = w[i-1][j-1] + 1;
                    map[i][j] = 0;
                } else {
                    w[i][j] = Math.max(w[i-1][j], w[i][j-1]);
                    if (w[i-1][j] <= w[i][j-1])
                        map[i][j] = -1;
                    else map[i][j] = 1;
                }
            }
        }
        while (n > 0 && m > 0){
            if (map[n][m] == 0){
                sb.append(a.charAt(n-1));
                n--;m--;
            }
            if (map[n][m] == -1)m--;
            if (map[n][m] == 1)n--;
        }
        sb.reverse();

        return sb.toString();
    }

    public static void main(String[] args) {
        int n = 5;
        String a = "heroically";
        String b = "scholarly";
        System.out.println(LongestCommonSubsequence(a, b));
    }
}
