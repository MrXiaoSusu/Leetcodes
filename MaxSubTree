#include <iostream>
#include <algorithm>

using namespace std;

struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode() {}
	TreeNode(int _val) { val = _val;  left = NULL; right = NULL; }
};

class Solution {
	public:
		int maxSubtree(TreeNode* treenode) {
			if (!treenode)
				return 0;
			int result = INT_MIN;
			_maxSubtree(treenode, result);
			return result;
		}

		int _maxSubtree(TreeNode* treenode, int &maxsum) {
			if (!treenode) {
				return 0;
			}
			int sumL = _maxSubtree(treenode->left, maxsum);
			int sumR = _maxSubtree(treenode->right, maxsum);
			int sum = sumL + sumR + treenode->val;
			maxsum = max(sum, maxsum);

			return sum;
		}
};
void main() {
	printf("Hello Word!\n");
	TreeNode *p1 = new TreeNode(1);
	TreeNode *p2 = new TreeNode(2);
	TreeNode *p3 = new TreeNode(-3);
	TreeNode *p4 = new TreeNode(-4);
	TreeNode *p5 = new TreeNode(0);
	TreeNode *p6 = new TreeNode(5);
	TreeNode *p7 = new TreeNode(-1);
	p1->left = p2;
	p1->right = p3;
	p2->left = p4;
	p2->right = p5;
	p3->left = p6;
	p3->right = p7;
	Solution *solution = new Solution();
	cout << solution->maxSubtree(p1) << endl;
}



